"""
Django settings for EditEngine project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import configparser
import os
import secrets
import sys

from pathlib import Path

from configurations import Configuration
from dotenv import load_dotenv

# Load environment variables
# If running tests, prefer .env.test over .env
if "test" in sys.argv or "pytest" in sys.modules:
    test_env_path = Path(__file__).resolve().parent.parent / ".env.test"
    if test_env_path.exists():
        load_dotenv(test_env_path, override=True)
    else:
        load_dotenv(override=True)
else:
    load_dotenv()


class Base(Configuration):
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent

    # The tool's home dir on Toolforge. This dir is available to the application at runtime, but not during the build.
    TOOL_DATA_DIR = Path(os.environ.get("TOOL_DATA_DIR", BASE_DIR))

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

    # Django requires a unique secret key for each Django app, that is used by several of its
    # security features. To simplify initial setup (without hardcoding the secret in the source
    # code) we set this to a random value every time the app starts. However, this will mean many
    # Django features break whenever an app restarts (for example, sessions will be logged out).
    # In your production apps you should set the `DJANGO_SECRET_KEY` env var explicitly.
    # Make sure to use a long unique value, like you would for a password. See:
    # https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-SECRET_KEY
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = os.environ.get(
        "DJANGO_SECRET_KEY",
        default=secrets.token_urlsafe(nbytes=64),
    )

    CSRF_TRUSTED_ORIGINS = [
        "https://editengine.toolforge.org",
        "https://django-test.toolforge.org",
    ]
    # CSRF_COOKIE_SECURE = True
    # SESSION_COOKIE_SECURE = True

    # Application definition
    INSTALLED_APPS = [
        # Use WhiteNoise's runserver implementation instead of the Django default, for dev-prod parity.
        "whitenoise.runserver_nostatic",
        "django.contrib.contenttypes",  # Required by DRF
        "django.contrib.auth",  # Required by DRF
        "django.contrib.admin",  # Required for admin interface
        "django.contrib.sessions",  # Required by admin
        "django.contrib.messages",  # Required by admin
        "django.contrib.staticfiles",
        "rest_framework",
        "drf_spectacular",
        "api",
        "services",
        "data",
    ]

    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",  # Required by admin
        # Django doesn't support serving static assets in a production-ready way, so we use the
        # WhiteNoise package to do so instead. The WhiteNoise middleware must be listed
        # after Django's `SecurityMiddleware` so that security redirects are still performed.
        # See: https://whitenoise.readthedocs.io
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",  # Required by admin
        "django.contrib.auth.middleware.AuthenticationMiddleware",  # Required by admin
        "django.contrib.messages.middleware.MessageMiddleware",  # Required by admin
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ]

    ROOT_URLCONF = "EditEngine.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [BASE_DIR / "templates"],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",  # Required by admin
                    "django.contrib.messages.context_processors.messages",  # Required by admin
                ],
            },
        },
    ]

    WSGI_APPLICATION = "EditEngine.wsgi.application"

    # No authentication needed for this API

    # Internationalization
    # https://docs.djangoproject.com/en/4.2/topics/i18n/
    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "Europe/Paris"

    USE_I18N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.2/howto/static-files/

    STATIC_URL = "/static/"
    STATIC_ROOT = BASE_DIR / "static"

    STORAGES = {
        # Enable WhiteNoise's GZip and Brotli compression of static assets:
        # https://whitenoise.readthedocs.io/en/latest/django.html#add-compression-and-caching-support
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

    # Don't store the original (un-hashed filename) version of static files, to reduce slug size:
    # https://whitenoise.readthedocs.io/en/latest/django.html#WHITENOISE_KEEP_ONLY_HASHED_FILES
    WHITENOISE_KEEP_ONLY_HASHED_FILES = True

    # Database
    # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    # REST Framework configuration
    REST_FRAMEWORK = {
        "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
        "DEFAULT_RENDERER_CLASSES": [
            "rest_framework.renderers.JSONRenderer",
        ],
        "DEFAULT_PARSER_CLASSES": [
            "rest_framework.parsers.JSONParser",
        ],
        "EXCEPTION_HANDLER": "api.exceptions.custom_exception_handler",
    }

    # Spectacular settings for API documentation
    SPECTACULAR_SETTINGS = {
        "TITLE": "EditEngine API",
        "DESCRIPTION": "API for Wikipedia article editing",
        "VERSION": "1.0.0",
        "SERVE_INCLUDE_SCHEMA": False,
    }

    # Celery Configuration
    # Default configuration for development/testing
    CELERY_TASK_ALWAYS_EAGER = True  # Run tasks synchronously by default
    CELERY_TASK_EAGER_PROPAGATES = True  # Propagate exceptions in eager mode
    CELERY_BROKER_URL = "memory://"  # In-memory broker for tests
    CELERY_RESULT_BACKEND = None  # No result backend needed
    CELERY_ACCEPT_CONTENT = ["json"]
    CELERY_TASK_SERIALIZER = "json"
    CELERY_RESULT_SERIALIZER = "json"
    CELERY_TIMEZONE = "UTC"

    # Celery performance settings from environment variables
    CELERY_WORKER_CONCURRENCY = int(os.environ.get("CELERY_WORKER_CONCURRENCY", "1"))
    CELERY_PARAGRAPH_BATCH_SIZE = int(
        os.environ.get("CELERY_PARAGRAPH_BATCH_SIZE", "2")
    )
    CELERY_MAX_TASKS_PER_CHILD = int(os.environ.get("CELERY_MAX_TASKS_PER_CHILD", "10"))

    # Redis Configuration (when using Redis broker/backend)
    REDIS_HOST = os.environ.get("REDIS_HOST", "redis.svc.tools.eqiad1.wikimedia.cloud")
    REDIS_PORT = int(os.environ.get("REDIS_PORT", "6379"))
    REDIS_DB = int(os.environ.get("REDIS_DB", "0"))
    REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD", "")

    def get_redis_url(self):
        """Build Redis URL from environment variables."""
        auth = f":{self.REDIS_PASSWORD}@" if self.REDIS_PASSWORD else ""
        return f"redis://{auth}{self.REDIS_HOST}:{self.REDIS_PORT}/{self.REDIS_DB}"


class Development(Base):
    DEBUG = True
    ALLOWED_HOSTS = [".localhost", "127.0.0.1", "[::1]", ".toolforge.org"]


class Staging(Base):
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = False
    ALLOWED_HOSTS = [
        ".toolforge.org",
    ]


class Production(Base):
    DEBUG = False
    ALLOWED_HOSTS = [".toolforge.org"]

    def __init__(self):
        print("[DEBUG] Loading Production configuration")
        print(
            f"[DEBUG] DJANGO_CONFIGURATION env var: {os.environ.get('DJANGO_CONFIGURATION')}"
        )
        super().__init__()

    def get_database_config(self):
        # First try environment variables (for jobs/builds)
        db_user = os.environ.get("TOOLFORGE_CREDENTIAL_USER")
        db_password = os.environ.get("TOOLFORGE_CREDENTIAL_PASSWORD")

        # If not in env, try to read from replica.my.cnf
        if not db_user:
            possible_paths = [
                os.path.expanduser("~/replica.my.cnf"),
                "/data/project/editengine/replica.my.cnf",
                "/home/tools.editengine/replica.my.cnf",
            ]

            replica_path = None
            for path in possible_paths:
                if os.path.exists(path):
                    replica_path = path
                    break

            if replica_path:
                config = configparser.ConfigParser()
                config.read(replica_path)
                try:
                    db_user = config.get("client", "user").strip()
                    db_password = config.get("client", "password").strip()
                except (configparser.NoSectionError, configparser.NoOptionError) as e:
                    print(f"[ERROR] Failed to parse replica.my.cnf: {e}")
                    # Fallback to prevent total failure
                    db_user = "root"
                    db_password = ""
            else:
                print("[WARNING] No replica.my.cnf found, using fallback credentials")
                db_user = "root"
                db_password = ""

        database_config = {
            "ENGINE": "django.db.backends.mysql",
            "NAME": f"{db_user}__editengine",
            "USER": db_user,
            "PASSWORD": db_password,
            "HOST": "tools.db.svc.wikimedia.cloud",
            "PORT": "3306",
            "OPTIONS": {
                "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                "charset": "utf8mb4",
                "connect_timeout": 60,
            },
            "CONN_MAX_AGE": 300,
        }

        return database_config

    @property
    def DATABASES(self):
        return {"default": self.get_database_config()}

    # Production Celery Configuration with Redis
    CELERY_TASK_ALWAYS_EAGER = False  # Use async tasks in production
    CELERY_TASK_EAGER_PROPAGATES = False

    # Unique queue name to prevent conflicts on shared Redis
    CELERY_DEFAULT_QUEUE = os.environ.get(
        "CELERY_DEFAULT_QUEUE", "editengine_" + secrets.token_hex(8)
    )

    @property
    def CELERY_BROKER_URL(self):
        return os.environ.get("REDIS_URL", self.get_redis_url())

    @property
    def CELERY_RESULT_BACKEND(self):
        return os.environ.get("REDIS_URL", self.get_redis_url())
